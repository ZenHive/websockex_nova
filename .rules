# WebsockexNova Rules

## Code Optimization Guidelines

- **All Elixir code files must balance token optimization with readability**

  - **Module Documentation**: Use concise, structured `@moduledoc` with clear bullet points for key components
  - **Function Documentation**: Optimize `@doc` blocks with a single-sentence summary followed by structured details
  - **Code Organization**: Optimize code structure for both machine and human comprehension

  - **DO (Optimized Documentation):**

    ```elixir
    @moduledoc """
    WebSocket client adapter for service-specific implementations.

    - Handles connection formatting and parameter normalization
    - Provides protocol-specific message encoding/decoding
    - Supports custom authentication strategies
    """

    @doc """
    Creates a client connection with the specified options.

    Validates input, formats connection parameters, and establishes the WebSocket connection.
    """
    ```

  - **DON'T (Verbose Documentation):**

    ```elixir
    @moduledoc """
    This module provides an adapter interface for creating service-specific WebSocket client implementations. It handles the connection formatting, parameter normalization, and provides methods for implementing protocol-specific message encoding and decoding. It also supports various authentication strategies and connection parameters.
    """

    @doc """
    Creates a new client connection with the specified options. This function validates the input parameters, formats the connection parameters according to the adapter's requirements, and establishes the WebSocket connection with the server. It returns either an ok tuple with the connection or an error tuple with the reason.
    """
    ```

  - **DO (Optimized Code Structure):**

    ```elixir
    # Group related functions together
    # Use clear naming conventions
    # Optimize function parameter patterns
    def connect(%{url: _url} = params, opts \\ []) do
      timeout = Keyword.get(opts, :timeout, 5000)
      reconnect = Keyword.get(opts, :reconnect, false)

      with {:ok, conn} <- establish_connection(params),
           true <- connection_ready?(conn),
           {:ok, client} <- initialize_client(conn, timeout, reconnect) do
        {:ok, client}
      else
        _ -> {:error, :connection_failed}
      end
    end

    defp connection_ready?(conn), do: Process.alive?(conn.pid)

    defp initialize_client(conn, timeout, reconnect) do
      client = %WebsockexNova.Client{
        conn: conn,
        timeout: timeout,
        reconnect: reconnect
      }
      {:ok, client}
    end
    ```

  - **DON'T (Suboptimal Code Structure):**

    ```elixir
    # Functions scattered without logical grouping
    # Unclear naming or verbosity
    # Repetitive code or complex conditionals
    def connect_to_websocket_server(connection_parameters, options \\ []) do
      options_with_defaults = Keyword.put_new(options, :connection_timeout, 5000)
      options_with_defaults = Keyword.put_new(options_with_defaults, :auto_reconnect, false)
      timeout = Keyword.get(options_with_defaults, :connection_timeout)
      reconnect = Keyword.get(options_with_defaults, :auto_reconnect)

      case establish_websocket_connection(connection_parameters) do
        {:ok, connection} ->
          connection_is_active = Process.alive?(connection.pid)

          if connection_is_active do
            client_struct = %WebsockexNova.Client{
              conn: connection,
              timeout: timeout,
              reconnect: reconnect
            }
            {:ok, client_struct}
          else
            {:error, :connection_not_active}
          end

        _ ->
          {:error, :no_connection}
      end
    end
    ```

- **Rationale:**
  - Reduces token usage and cognitive load while maintaining clarity
  - Improves code maintainability and review efficiency
  - Aligns code documentation with existing machine-readable documentation standards
  - Speeds up AI tools' understanding of code patterns and intent
  - Reduces error likelihood by favoring clear, consistent patterns

## WebSocket Adapter Implementation Guidelines

- **Core Principles**:
  - Adapters should be thin, focused on protocol translation only
  - Prefer composition over inheritance for behavior customization
  - Maintain clear separation between transport and business logic
  - Emit appropriate telemetry events at all critical points

- **Adapter Structure**:
  - ✅ **DO**: Keep adapters focused on format translation
    ```elixir
    defmodule WebsockexNova.Adapters.CustomAdapter do
      use WebsockexNova.Adapter

      @impl WebsockexNova.Behaviors.ConnectionHandler
      def connection_info(opts) do
        # Only translate between user format and internal format
        {:ok, %{
          host: Map.get(opts, :host, "api.example.com"),
          port: Map.get(opts, :port, 443),
          path: "/ws/v2",
          transport: :tls
        }}
      end

      @impl WebsockexNova.Behaviors.MessageHandler
      def encode_message(message) do
        # Simple translation of message format
        {:ok, Jason.encode!(%{cmd: message.type, payload: message.data})}
      end
    end
    ```

  - ❌ **DON'T**: Mix business logic into adapters
    ```elixir
    # Don't add business logic to adapters
    defmodule ComplexAdapter do
      use WebsockexNova.Adapter

      @impl WebsockexNova.Behaviors.MessageHandler
      def encode_message(message) do
        # Business logic shouldn't be here
        message = enrich_with_business_data(message)
        apply_business_rules(message)
        store_in_database(message.id, message)

        {:ok, Jason.encode!(message)}
      end
    end
    ```

## Integration Testing Requirements

- **Core Principles**:
  - Test with REAL WebSocket endpoints when possible
  - Use local test server with `Plug.Cowboy` for controlled testing
  - Test behavior under realistic conditions (network issues, reconnection)
  - Document test scenarios thoroughly

- **Test Structure**:
  - ✅ **DO**: Use controlled local test servers and real-world conditions
    ```elixir
    @tag :integration
    test "reconnects after connection interruption", %{test_server: server} do
      # Use local WebSocket test server
      client_opts = [url: server.url, reconnect: true]

      # Simulate realistic conditions
      {:ok, client} = WebsockexNova.Client.connect_with_reconnection(client_opts)
      assert WebsockexNova.Client.connected?(client)

      # Force disconnect the server side
      server.disconnect_client(client.id)

      # Verify client reconnects properly
      wait_for_reconnection(client)
      assert WebsockexNova.Client.connected?(client)
    end
    ```

- **Test Environment Setup**:
  - Create proper test helpers in `test/support/`
  - Use modular test server implementation
  - Tag integration tests with `@tag :integration`
  - Structure test cases to cover full client lifecycle

## Client API Design Guidelines

- **Core Principles**:
  - Public API should follow Elixir conventions of `{:ok, result}` or `{:error, reason}`
  - Prefer explicit parameters over options maps for primary parameters
  - Use optional keyword lists for secondary parameters
  - Support both synchronous and asynchronous operation modes

- **API Structure**:
  - ✅ **DO**: Use clear, consistent API patterns
    ```elixir
    # Primary parameters as explicit args, optional params as keyword list
    @spec connect(url :: String.t(), opts :: keyword()) ::
          {:ok, client()} | {:error, WebsockexNova.error()}

    # Clear async vs sync patterns
    @spec send_message(client(), message()) :: {:ok, response()} | {:error, error()}
    @spec send_message_async(client(), message(), callback()) :: :ok
    ```

  - ❌ **DON'T**: Mix parameter styles or create inconsistent APIs
    ```elixir
    # Don't mix parameter styles
    def connect(opts_map) when is_map(opts_map), do: # Implementation
    def send(client, message, callback \\ nil, options \\ []) do # Implementation
    ```

## Error Handling Architecture

- **Core Principles**:
  - Pass raw errors without wrapping in custom structs
  - Use consistent {:ok, result} | {:error, reason} pattern
  - Apply "let it crash" philosophy for unexpected errors
  - Add minimal context information only when necessary

- **Error Handling Requirements**:
  - ✅ **DO**: Use pattern matching on raw error data
    ```elixir
    def handle_error({:error, error}) do
      # Take action based on the raw error pattern
      case error do
        {:timeout, duration, _} -> handle_timeout(duration)
        {:network_error, details} -> handle_network_error(details)
        _ -> {:error, :unknown_error}
      end
    end
    ```

  - ❌ **DON'T**: Create custom error transformation logic
    ```elixir
    # Don't create custom transformation logic
    def handle_error({:error, error}) do
      # This transforms errors unnecessarily
      error_type = determine_error_type(error)
      error_data = extract_error_data(error)

      # Transforms errors inconsistently
      case error_type do
        :timeout -> handle_timeout(error_data)
        :network -> handle_network_error(error_data)
        _ -> {:error, :unknown_error}
      end
    end
    ```

- **Error Creation Guidelines**:
  - Return original error data in {:error, reason} tuples
  - Include relevant information directly in the error value
  - Use consistent error formats across similar functions
  - For expected errors, create clear error atoms or tuples with data

## Performance Considerations

- **Core Guidelines**:
  - Start with the simplest implementation that meets requirements
  - Measure before optimizing
  - Optimize connection handling over message processing (when needed)
  - Consider client connection pooling for high-volume applications

- **Connection Management**:
  - ✅ **DO**: Use proper connection lifecycle management
    ```elixir
    # Connection pooling pattern
    pool_opts = [
      size: 5,                          # Default pool size
      max_overflow: 10,                 # Maximum additional connections
      strategy: :fifo,                  # Connection selection strategy
      name: {:local, :websocket_pool}   # Local name
    ]

    # Simple pool initialization
    {:ok, _} = WebsockexNova.Pool.start_link(pool_opts)

    # Usage pattern
    WebsockexNova.Pool.with_conn(:websocket_pool, fn conn ->
      WebsockexNova.Client.send_message(conn, message)
    end)
    ```

## Documentation Requirements

- **Required Documentation Structure**:
  - `docs/architecture.md`: Component diagrams and design decisions
  - `docs/client_macro.md`: Usage examples and best practices
  - `docs/integration_testing.md`: Integration testing patterns
  - `docs/behaviors.md`: Available behaviors and their purposes

- **Documentation Standards**:
  - All public modules and functions must have documentation
  - Use consistent formatting and examples
  - Include typical usage patterns
  - Document error scenarios and handling

## Multi-Agent Workflow for Elixir Development

- **Core Roles**:
  - **Planner**: Analyzes requirements, documents tasks with testable criteria
  - **Executor**: Implements tasks following TDD principles
  - **Reviewer**: Conducts thorough code reviews, runs static checks

- **Required Documentation Structure:**
  - `docs/Architecture.md`: System design, supervision hierarchies, component diagrams
  - `docs/MVP.md`: Project roadmap and milestones
  - `docs/TaskList.md`: Structured, human-readable task tracking
  - `.cursor/scratchpad.md`: Temporary workspace for notes, progress tracking

- **Task Requirements in `docs/TaskList.md`**:
  ```markdown
  - ID: WNX####
  - Description: Implement Module.function to handle X
  - ExUnit Requirements: Test cases for normal flow, error states
  - Integration Test Requirements: Real WebSocket endpoint scenarios
  - Dependencies: Other related modules/tasks
  - Status: Planned|In Progress|Review|Completed|Blocked
  - Review Rating: ⭐⭐⭐⭐⭐
  ```

- **Development Workflow**:
  - ✅ **DO**: Follow the TDD cycle (tests first, then implementation)
    ```elixir
    # First write the test
    test "handles valid input" do
      assert {:ok, result} = Adapter.connect(valid_input)
      assert result.state == :connected
    end

    # Then implement the function
    @spec connect(input :: map()) :: {:ok, map()} | {:error, atom()}
    def connect(input) when is_map(input) do
      with {:ok, validated} <- validate_input(input),
           {:ok, conn} <- establish_connection(validated) do
        {:ok, conn}
      end
    end
    ```

  - ❌ **DON'T**: Implement without tests or task documentation
    ```elixir
    # Missing tests, specs, and documentation
    def connect(input) do
      # Implementation without validation or proper error handling
      establish_connection(input)
    end
    ```

## WebSocket Connection Architecture

- **Connection Model**:
  - WebSocket client connections are processes supervised by the library's supervisor tree
  - Connection processes are monitored, not owned by user code
  - Failures detected by `Process.monitor/1` and classified by exit reasons

- **Reconnection API Requirements**:
  - ✅ **DO**: Follow the established reconnection workflow
    ```elixir
    # Public API with reconnection capability
    {:ok, client} = WebsockexNova.Client.connect_with_reconnection(url, [
      reconnect: [
        auto_reconnect: true,
        max_attempts: 5,
        initial_delay: 1000,
        on_reconnect: &handle_reconnect/1
      ]
    ])
    ```

  - ❌ **DON'T**: Implement custom reconnection logic outside the framework
    ```elixir
    # Don't create custom reconnection loops
    def custom_reconnect(url, options) do
      case WebsockexNova.Client.connect(url, options) do
        {:ok, client} -> {:ok, client}
        {:error, _} ->
          Process.sleep(1000)
          custom_reconnect(url, options)
      end
    end
    ```

- **Error Classification**:
  - All WebSocket errors must be properly classified
  - Network errors should be distinguished from protocol/application errors
  - Error handling must support reconnection decision-making

- **Connection Testing Requirements**:
  - Tests must reliably simulate network failures
  - Tests must handle asynchronous reconnection processes
  - Avoid fixed timing assumptions in tests

  ```elixir
  # Correct way to test reconnection
  @tag :integration
  test "reconnects automatically after network interruption", %{ws_url: ws_url} do
    client_opts = [url: ws_url, reconnect: true]

    {:ok, client} = WebsockexNova.Client.connect_with_reconnection(client_opts)

    # Verify initial connection works
    assert WebsockexNova.Client.connected?(client)

    # Simulate network interruption
    Process.exit(client, :kill)

    # Wait for reconnection
    wait_for_reconnection(client)
    assert WebsockexNova.Client.connected?(client)
  end
  ```

## Simplicity Guidelines

- **Foundational Principles**:
  - Code simplicity is a primary feature, not an afterthought
  - Implement the minimal viable solution first
  - Each component has a limited "complexity budget"
  - Create abstractions only with proven value (≥3 concrete examples)
  - Start simple and add complexity incrementally
  - Prioritize execution and practical operational efficiency
  - Deliberately simplify solutions wherever possible, reducing overhead and maintenance costs

- **Code Structure Guidelines**:
  - ✅ **DO**: Keep modules and functions small and focused
    ```elixir
    # Simple, single-responsibility function
    @spec validate_connection_params(map()) :: {:ok, map()} | {:error, String.t()}
    def validate_connection_params(params) when is_map(params) do
      with {:ok, _} <- validate_required_fields(params),
           {:ok, _} <- validate_value_formats(params) do
        {:ok, params}
      else
        {:error, reason} -> {:error, reason}
      end
    end
    ```

  - ❌ **DON'T**: Create complex abstractions prematurely
    ```elixir
    # Overly abstract, complex pattern with speculative functionality
    defmodule ComplexConnectionBehavior do
      @callback validate(term()) :: {:ok, term()} | {:error, term()}
      # Many other callbacks for hypothetical future needs
    end

    defmodule ConnectionRegistry do
      # Complex registry for validators that aren't needed yet
    end
    ```

- **Module Structure Limits**:
  - Maximum 5 functions per module initially
  - Maximum function length of 15 lines
  - Maximum of 2 levels of function calls for any operation
  - Prefer pure functions over processes when possible

- **Process and State Management**:
  - ✅ **DO**: Use the simplest process pattern that works
    ```elixir
    # Simple GenServer when needed
    def init(args) do
      {:ok, %{connections: %{}, subscriptions: %{}}}
    end

    def handle_call({:connect, params}, _from, state) do
      with {:ok, conn} <- WebsockexNova.Gun.connect(params) do
        new_state = put_in(state.connections[conn.id], conn)
        {:reply, {:ok, conn}, new_state}
      else
        error -> {:reply, error, state}
      end
    end
    ```

  - ❌ **DON'T**: Create complex process hierarchies unnecessarily
    ```elixir
    # Unnecessary dynamic supervisor for a single process type
    defmodule ComplexConnectionSupervisor do
      use DynamicSupervisor
      # Complex supervision strategy for a simple feature
    end
    ```

- **Technology Selection Guidelines**:
  - Use simple GenServers before ETS, ETS before Mnesia
  - Default to function components over stateful processes
  - If a feature can be implemented without a custom GenServer, do so

- **Anti-Patterns to Avoid**:
  - No premature optimization without performance data
  - No "just-in-case" code for hypothetical requirements
  - No abstractions without at least 3 concrete usage examples
  - No complex macros unless absolutely necessary
  - No overly clever solutions that prioritize elegance over maintainability

"The elegance comes from doing less, not more. Removing complexity, not adding it!"

## TaskList.md Format Specification

```
# WebsockexNova Task List

## Development Status Update (Month Year)
### ✅ Recently Completed
- **WNX####**: [Task title] - [Brief description]
- **WNX####**: [Task title] - [Brief description]

### 🚀 Next Up
1. **WNX####**: [Task title] ([Priority] Priority)
2. **WNX####**: [Task title] ([Priority] Priority)

### 📊 Progress: [X]/[Y] tasks completed ([Z]%)

## Integration Test Setup Notes
[Brief integration testing reminders]

## Simplicity Guidelines for All Tasks
[Simplicity principles and requirements]

## Current Tasks
| ID     | Description                    | Status  | Priority | Assignee | Review Rating |
| ------ | ------------------------------ | ------- | -------- | -------- | ------------- |
| WNX#### | [Task description]             | [Status]| [Priority]| [Assignee] |             |

## Implementation Order
[Ordered list of tasks with dependencies and explanations]

## Completed Tasks
| ID     | Description                    | Status    | Priority | Assignee | Review Rating |
| ------ | ------------------------------ | --------- | -------- | -------- | ------------- |
| WNX#### | [Task description]             | Completed | [Priority]| [Assignee] | ⭐⭐⭐⭐⭐    |

## Task Details

### WNX####: [Task Title] (✅ COMPLETED)
**Description**: [Detailed task description]

**Simplicity Progression Plan**:
1. [Step 1]
2. [Step 2]
3. [Step 3]
4. [Step 4]

**Simplicity Principle**:
[Brief description of the simplicity principle applied]

**Abstraction Evaluation**:
- **Challenge**: [Question about necessary abstraction]
- **Minimal Solution**: [Simplest viable solution]
- **Justification**:
  1. [Use case 1]
  2. [Use case 2]
  3. [Use case 3]

**Requirements**:
- [Requirement 1]
- [Requirement 2]
- [Requirement 3]

**ExUnit Test Requirements**:
- [Test requirement 1]
- [Test requirement 2]
- [Test requirement 3]

**Integration Test Scenarios**:
- [Test scenario 1]
- [Test scenario 2]
- [Test scenario 3]

**Typespec Requirements**:
- [Typespec requirement 1]
- [Typespec requirement 2]
- [Typespec requirement 3]

**TypeSpec Documentation**:
- [Documentation requirement 1]
- [Documentation requirement 2]
- [Documentation requirement 3]

**TypeSpec Verification**:
- [Verification step 1]
- [Verification step 2]
- [Verification step 3]

**Error Handling**
**Core Principles**
- Pass raw errors
- Use {:ok, result} | {:error, reason}
- Let it crash

**Error Implementation**
- No wrapping
- Minimal rescue
- function/1 & /! versions

**Error Examples**
- Raw error passthrough
- Simple rescue case
- Supervisor handling

**GenServer Specifics**
- Handle_call/3 error pattern
- Terminate/2 proper usage
- Process linking considerations

**Status**: [Status]
**Priority**: [Priority]

**Implementation Notes**:
- [Implementation note 1]
- [Implementation note 2]
- [Implementation note 3]

**Complexity Assessment**:
- [Complexity assessment 1]
- [Complexity assessment 2]
- [Complexity assessment 3]

**Maintenance Impact**:
- [Maintenance impact 1]
- [Maintenance impact 2]
- [Maintenance impact 3]

**Error Handling Implementation**:
- [Error handling implementation 1]
- [Error handling implementation 2]
- [Error handling implementation 3]

### WNX####: [Task Title]
[Same structure as above for current/planned tasks]

## Implementation Notes
[General implementation notes and guidelines for the entire project]
```

- **Required Fields and Values**

  - **ID Format**: `WNX####` (Regex: `WNX\d{4}`)
    - Core functionality: WNX0001-WNX0099
    - Feature enhancements: WNX0100-WNX0199
    - Documentation: WNX0200-WNX0299
    - Testing: WNX0300-WNX0399

  - **Status Values**:
    - `Planned`
    - `In Progress`
    - `Review`
    - `Completed`
    - `Blocked`

  - **Priority Values**:
    - `Critical`
    - `High`
    - `Medium`
    - `Low`

  - **Review Rating**:
    - Format: ⭐ stars (1-5) for visual representation
    - Alternatively: decimal number between 1.0-5.0

- **Task Section Requirements**
  - Each task must have these sections in order:
    1. `Description`
    2. `Simplicity Progression Plan`
    3. `Simplicity Principle`
    4. `Abstraction Evaluation`
    5. `Requirements`
    6. `ExUnit Test Requirements`
    7. `Integration Test Scenarios`
    8. `Typespec Requirements`
    9. `TypeSpec Documentation`
    10. `TypeSpec Verification`
    11. `Error Handling` (with subsections)
    12. `Status`
    13. `Priority`
    14. Additional sections for completed tasks:
        - `Implementation Notes`
        - `Complexity Assessment`
        - `Maintenance Impact`
        - `Error Handling Implementation`

- **Validation Rules**
  - All task IDs must be unique
  - All current tasks must have detailed entries
  - All in-progress tasks must have subtasks
  - All completed subtasks must have review ratings
  - All sections must use correct heading levels:
    - `#` for document title
    - `##` for major sections
    - `###` for tasks
    - `####` for subtasks
  - RUN mix validate_tasklist to validate the tasklist

## Telemetry Integration Requirements

- **Required Events**:
  - Connection lifecycle: `:websockex_nova, [:connection, :opened|:closed|:error]`
  - Message handling: `:websockex_nova, [:message, :received|:sent|:error]`
  - Reconnection: `:websockex_nova, [:reconnection, :attempt|:success|:failure]`
  - Rate limiting: `:websockex_nova, [:rate_limit, :applied|:exceeded]`

- **Measurement Guidelines**:
  - Include timing information for all operations
  - Track message sizes for bandwidth monitoring
  - Count connection attempts and failures
  - Provide detailed error information in metadata

## Test File Organization

- **Core Test Directories**:
  - `test/websockex_nova/` - Unit tests for core functionality
  - `test/integration/` - Integration tests with real WebSocket endpoints
  - `test/support/` - Test helpers and mock implementations

- **Testing Guidelines**:
  - Use real WebSocket servers for integration tests
  - Create comprehensive test helpers in `test/support/`
  - Test both success and failure scenarios
  - Test edge cases like reconnection, authentication failures
  - Document test approach in code comments